'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReactPageClick = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MAX_MOVE = 20;

var extractCoordinates = function extractCoordinates(_ref) {
  var changedTouches = _ref.changedTouches;
  return { x: changedTouches[0].screenX, y: changedTouches[0].screenY };
};

var ReactPageClick = exports.ReactPageClick = function (_React$PureComponent) {
  _inherits(ReactPageClick, _React$PureComponent);

  function ReactPageClick() {
    var _ref2;

    var _temp, _this, _ret;

    _classCallCheck(this, ReactPageClick);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = ReactPageClick.__proto__ || Object.getPrototypeOf(ReactPageClick)).call.apply(_ref2, [this].concat(args))), _this), _initialiseProps.call(_this), _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ReactPageClick, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.insideClick = false;
      this.touchStart = null;
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      global.window.addEventListener('mousedown', this.onDocumentMouseDown, false);
      global.window.addEventListener('mouseup', this.onDocumentMouseUp, false);
      global.window.addEventListener('touchstart', this.onDocumentTouchStart, false);
      global.window.addEventListener('touchend', this.onDocumentTouchEnd, false);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      global.window.removeEventListener('mousedown', this.onDocumentMouseDown, false);
      global.window.removeEventListener('mouseup', this.onDocumentMouseUp, false);
      global.window.removeEventListener('touchstart', this.onDocumentTouchStart, false);
      global.window.removeEventListener('touchend', this.onDocumentTouchEnd, false);
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props.outsideOnly ? {
        onMouseDown: this.onMouseDown,
        onTouchStart: this.onTouchStart
      } : {};

      return _react2.default.cloneElement(_react2.default.Children.only(this.props.children), props);
    }
  }]);

  return ReactPageClick;
}(_react2.default.PureComponent);

ReactPageClick.defaultProps = {
  onMouseDown: undefined,
  onTouchStart: undefined,
  outsideOnly: true,
  notifyOnTouchEnd: false
};

var _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this.onDocumentMouseDown = function () {
    var _props;

    if (_this2.insideClick) {
      return;
    }
    (_props = _this2.props).notify.apply(_props, arguments);
  };

  this.onDocumentMouseUp = function () {
    _this2.insideClick = false;
  };

  this.onDocumentTouchEnd = function (event) {
    for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    // on mobile safari click events are not bubbled up to the document unless the target has the
    // css `cursor: pointer;` http://www.quirksmode.org/blog/archives/2010/10/click_event_del_1.html
    // so try and work out if we should call the notify prop
    if (_this2.props.notifyOnTouchEnd && _this2.touchStart && !_this2.insideClick) {
      var _extractCoordinates = extractCoordinates(event),
          x = _extractCoordinates.x,
          y = _extractCoordinates.y;

      var dx = Math.abs(x - _this2.touchStart.x);
      var dy = Math.abs(y - _this2.touchStart.y);

      if (dx < MAX_MOVE && dy < MAX_MOVE) {
        var _props2;

        (_props2 = _this2.props).notify.apply(_props2, [event].concat(args));
      }
    }
    _this2.touchStart = null;
    _this2.insideClick = false;
  };

  this.onDocumentTouchStart = function (event) {
    for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      args[_key3 - 1] = arguments[_key3];
    }

    if (_this2.insideClick) {
      return;
    }
    if (_this2.props.notifyOnTouchEnd) {
      _this2.touchStart = extractCoordinates(event);
    } else {
      var _props3;

      (_props3 = _this2.props).notify.apply(_props3, [event].concat(args));
    }
  };

  this.onMouseDown = function () {
    _this2.insideClick = true;
    if (_this2.props.onMouseDown) {
      var _props4;

      (_props4 = _this2.props).onMouseDown.apply(_props4, arguments);
    }
  };

  this.onTouchStart = function () {
    _this2.insideClick = true;
    if (_this2.props.onTouchStart) {
      var _props5;

      (_props5 = _this2.props).onTouchStart.apply(_props5, arguments);
    }
  };
};